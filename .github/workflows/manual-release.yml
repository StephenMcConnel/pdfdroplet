name: Manual Release Build

on:
    workflow_dispatch:
        inputs:
            prerelease:
                description: "Mark the release as a pre-release."
                required: false
                type: boolean
                default: false

jobs:
    build-and-release:
        name: Build and publish installer
        runs-on: windows-latest
        permissions:
            contents: write
        env:
            PROJECT_PATH: src/DotNet.csproj
            BUILD_CONFIGURATION: Release
            RUNTIME_IDENTIFIER: win-x86
            PUBLISH_DIR: output/publish
            # SDK used to build; project target version remains defined in Directory.Build.props / csproj
            DOTNET_VERSION: "8.0.x"
        steps:
            - name: Checkout repository
              uses: actions/checkout@v4

            - name: Setup .NET
              uses: actions/setup-dotnet@v4
              with:
                  dotnet-version: ${{ env.DOTNET_VERSION }}

            - name: Determine version
              id: version
              shell: pwsh
              run: |
                  $propsPath = Join-Path $env:GITHUB_WORKSPACE 'Directory.Build.props'
                  if (-not (Test-Path $propsPath)) {
                    throw "Directory.Build.props not found at $propsPath"
                  }
                  [xml]$props = Get-Content $propsPath
                  $version = $props.Project.PropertyGroup.Version
                  if ([string]::IsNullOrWhiteSpace($version)) {
                    throw 'Version property not found in Directory.Build.props'
                  }
                  "value=$version" >> $env:GITHUB_OUTPUT

            - name: Normalize installer version
              id: installer_version
              shell: pwsh
              run: |
                  $raw = '${{ steps.version.outputs.value }}'
                  if ([string]::IsNullOrWhiteSpace($raw)) {
                    throw 'Version step did not provide a value.'
                  }
                  $segments = $raw.Split('.')
                  while ($segments.Count -lt 3) {
                    $segments += '0'
                  }
                  if ($segments.Count -gt 3) {
                    $segments = $segments[0..2]
                  }
                  $normalized = [string]::Join('.', $segments)
                  "value=$normalized" >> $env:GITHUB_OUTPUT

            - name: Restore dependencies
              run: dotnet restore $env:PROJECT_PATH --runtime $env:RUNTIME_IDENTIFIER

            - name: Build
              run: dotnet build $env:PROJECT_PATH --configuration $env:BUILD_CONFIGURATION --no-restore --runtime $env:RUNTIME_IDENTIFIER /p:Platform=x86

            - name: Publish
              run: dotnet publish $env:PROJECT_PATH --configuration $env:BUILD_CONFIGURATION --no-restore --runtime $env:RUNTIME_IDENTIFIER --output output/Release/win-x86 /p:Platform=x86 /p:PublishSingleFile=false

            - name: Install Inno Setup
              shell: pwsh
              run: |
                  choco install innosetup --yes --no-progress

            - name: Build Inno Setup installer
              shell: pwsh
              run: |
                  $version = '${{ steps.installer_version.outputs.value }}'
                  if ([string]::IsNullOrWhiteSpace($version)) {
                    throw 'Installer version output missing.'
                  }
                  $programFilesX86 = [System.Environment]::GetFolderPath('ProgramFilesX86')
                  $isccPath = Join-Path $programFilesX86 'Inno Setup 6\ISCC.exe'
                  if (-not (Test-Path $isccPath)) {
                    throw "Inno Setup compiler not found at $isccPath"
                  }
                  & $isccPath "installer\PdfDroplet.iss" "/DMyAppVersion=$version"

            - name: Prepare installer asset
              id: installer
              shell: pwsh
              run: |
                  $version = '${{ steps.installer_version.outputs.value }}'
                  if ([string]::IsNullOrWhiteSpace($version)) {
                    throw 'Installer version output missing.'
                  }
                  $source = Join-Path $env:GITHUB_WORKSPACE 'output\Installer\PdfDropletInstaller.exe'
                  if (-not (Test-Path $source)) {
                    throw "Expected installer at $source"
                  }
                  $artifactName = "PdfDropletInstaller-$version"
                  $destination = Join-Path (Split-Path $source -Parent) ("$artifactName.exe")
                  Copy-Item $source $destination -Force
                  "artifact_name=$artifactName" >> $env:GITHUB_OUTPUT
                  "installer_path=$destination" >> $env:GITHUB_OUTPUT

            - name: Upload build artifact
              uses: actions/upload-artifact@v4
              with:
                  name: ${{ steps.installer.outputs.artifact_name }}
                  path: ${{ steps.installer.outputs.installer_path }}

            - name: Resolve release metadata
              id: release
              shell: pwsh
              run: |
                  $version = '${{ steps.version.outputs.value }}'
                  if ([string]::IsNullOrWhiteSpace($version)) {
                    throw 'Version step did not provide a value.'
                  }
                  $tag = "v$version"
                  $name = "PdfDroplet $version"
                  $notes = "Automated release generated from the Manual Release Build workflow, including the Windows installer built with Inno Setup."
                  "tag_name=$tag" >> $env:GITHUB_OUTPUT
                  "release_name=$name" >> $env:GITHUB_OUTPUT
                  "body=$notes" >> $env:GITHUB_OUTPUT

            - name: Create GitHub release
              uses: softprops/action-gh-release@v2
              with:
                  tag_name: ${{ steps.release.outputs.tag_name }}
                  name: ${{ steps.release.outputs.release_name }}
                  body: ${{ steps.release.outputs.body }}
                  draft: true
                  prerelease: ${{ inputs.prerelease }}
                  files: ${{ steps.installer.outputs.installer_path }}
